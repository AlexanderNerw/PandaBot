from aiogram.types import InlineQueryResultArticle, InputTextMessageContent, ReplyKeyboardMarkup, Message
import handlers.setting as st, handlers.keyboards as kb, handlers.tests as ts, menu, callback_querry
from aiogram.dispatcher.filters.state import State, StatesGroup
from handlers.config import dp, bot, Dispatcher, ADMIN
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram import executor
from handlers.querry_db import db
from handlers.dialogs import *



# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç—Ä–æ—è–Ω–∏–π
class ClientStateGroup(StatesGroup):
    photo = State()
    desc = State()

@dp.message_handler(commands=['cancel'])
async def get_cancel(message: Message, state: FSMContext) -> None:
    await state.finish()


#‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ

@dp.message_handler(commands=['start'])
async def welcome(message) -> None: ################### –°–¢–ê–†–¢ –ú–ï–ù–Æ ######################
    global msg
    msg = message

    try:
        if(not db.subsex(message.from_user.id)): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î

            name_start = str(message.from_user.first_name)
            language = str(message.from_user.language_code)
            db.add_subs(message.from_user.id)
            db.adding(message.from_user.id, 'username', name_start)
            db.adding(message.from_user.id, 'language', language)
            await message.answer( f"{hi[language]} <b>{name_start}</b>! üòâ {hi_start[language]}" , parse_mode='html', reply_markup=kb.languageB)

        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
            global name
            name = db.getting(message.from_user.id, 'username')
            language = db.getting(message.from_user.id, 'language')
            await message.answer( f"{hi[language]} <b>{name}</b>! {again_hi_start[language]}", parse_mode='html')

    except Exception as ex:
        print('[INFO] Error of start-menu: ', ex)

#------------------------------------------------  

#******************************* –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï *******************************

@dp.message_handler(commands=['help'])
async def help_panel(message) -> None:
    global msg
    msg = message
    await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/poh - –ü–Ω—É—Ç—å –ê–¥–º–∏–Ω–∞\n/ask - –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ( /ask text )"\n/feedback - –°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º')
  
#------------------------------------------------  

@dp.message_handler(commands=['negritos'])
async def admin_panel(message) -> None:
    global msg
    msg = message
    try:
        if message.from_user.id in ADMIN:
            await message.answer('Hi, my lord.')
            await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/terakota - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π\n/hyi - –ü–Ω—É—Ç—å –°–∞–Ω—é\n/sending - (id) (text)\n/mega_sending - (text)')
        else:
            await message.answer('–ö—É–¥–∞–∞–∞ –º—ã –ª–µ–∑–µ–º? –ù–µ –ø–æ–ª–æ–∂–µ–Ω–æ, –¥–∞–≤–∞–π –≤ –º–µ–Ω—é.')
            await menu.toMenu(message)
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞: ', ex)

#------------------------------------------------  

@dp.message_handler(commands=['mega_sending'])
async def mega_sending(message) -> None:
    global msg
    msg = message
    try:
        a = db.get_all('user_id')
        for i in a:
            await bot.send_message(*i, message.from_chat.text[13:])
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['sending'])
async def sending(message) -> None:
    global msg
    msg = message

    try:
        await bot.send_message(message.text[9:20], f"–ê–≤—Ç–æ—Ä: {message.text[20:]}")
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['ask'])
async def ask(message) -> None:
    global msg, name
    msg = message
    name = message.from_user.first_name
    try:
        await bot.send_message(ADMIN[0], f'{name} - id: {message.from_user.id}, @{message.from_user.username}\nMessage: {message.text[5:]}')
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=["feedback"])
async def feedback(message) -> None: 
    global msg
    msg = message
    try:
        if (db.getting(message.from_user.id, 'language') == "ru"):
            await message.answer("–ì–æ–≤–æ—Ä—è—Ç, —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å? üôÇ", reply_markup=kb.fbBRu)
        else: 
            await message.answer("–ö–∞–∂—É—Ç—å, —á–µ—Ä–µ–∑ —Ü–µ–π –≤—ñ–¥–¥—ñ–ª –º–æ–∂–Ω–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –∞–≤—Ç–æ—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à? üôÇ", reply_markup=kb.fbBUa)

    except Exception as ex:
        print('–û—à–∏–±–∫–∞ feedback –Ω–∞—á–∞–ª–∞: ', ex)

#------------------------------------------------  

@dp.message_handler(commands=['poh'])
async def poh(message):
    global msg
    msg = message

    try:
        user_name = message.from_user.username
        name = db.getting(message.from_user.id, 'name')
        await bot.send_message(ADMIN[0], f"@{user_name}: {name} —Ç–µ–±—è –ø–Ω—É–ª :)")
        await message.answer('–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ –±–æ—Å—Å. –Ø –µ–≥–æ —É–ª–æ–∂–∏–ª')
    except Exception as ex:
        print("poh –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['pizda'])
async def pizda(message):
    global msg
    msg = message
    try:
        pass
    except Exception as ex:
        print("pizda –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  


if __name__ == '__main__':
    executor.start_polling(dispatcher = dp, skip_updates= True)