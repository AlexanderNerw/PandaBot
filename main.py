from handlers import keyboards as kb, tests as ts, setting as st, menu
from importing import *

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç—Ä–æ—è–Ω–∏–π
class ClientStateGroup(StatesGroup):
    photo = State()
    desc = State()

@dp.message_handler(commands=['cancel'])
async def get_cancel(message: types.Message, state: FSMContext) -> None:
    await state.finish()


#‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ

@dp.message_handler(commands=['start'])
async def welcome(message): ################### –°–¢–ê–†–¢ –ú–ï–ù–Æ ######################
    global msg
    msg = message

    try:
        if(not db.subsex(message.from_user.id)): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î

            name_start = str(message.from_user.first_name)
            language = str(message.from_user.language_code)
            db.add_subs(message.from_user.id)
            db.adding(message.from_user.id, 'username', name_start)
            print(message)
            db.adding(message.from_user.id, 'language', language)
            await message.answer(f" {hi[language]} <b>{name_start}</b>! üòâ {hi_start[language]}" , parse_mode='html', reply_markup=kb.languageB)

        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
            global name
            name = db.getting(message.from_user.id, 'username')
            language = db.getting(message.from_user.id, 'language')
            await message.answer(f" {hi[language]} <b>{name}</b>! {again_hi_start[language]}", parse_mode='html')

    except Exception as ex:
        print('[INFO] Error of start-menu: ', ex)

#------------------------------------------------  

# @dp.message_handler(commands=['menu'])
# async def toMenu(message): #******************* –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ *********************
#     global msg
#     msg = message
#     print(msg)
#     try:
#         if (db.getting(message.from_user.id, 'language') == "ru"): #            –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
#             await message.answer("üî∏                <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>                üî∏\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
#             parse_mode='html', reply_markup=kb.board_menu)
                        
#         elif (db.getting(message.from_user.id, 'language') == "uk"): #            –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
#             await message.answer("üî∏                <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>                üî∏\n\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.",
#             parse_mode='html', reply_markup = kb.board_menu)
#     except Exception as ex:
#         print('–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ', ex)

#******************************* –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï *******************************

@dp.message_handler(commands=['help'])
async def help_panel(message):
    global msg
    msg = message
    await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/poh - –ü–Ω—É—Ç—å –ê–¥–º–∏–Ω–∞\n/ask - –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ( /ask text )"\n/feedback - –°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º')
  
#------------------------------------------------  

@dp.message_handler(commands=['negritos'])
async def admin_panel(message):
    global msg
    msg = message
    try:
        if message.from_user.id in ADMIN:
            await message.answer('Hi, my lord.')
            await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/terakota - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π\n/hyi - –ü–Ω—É—Ç—å –°–∞–Ω—é\n/sending - (id) (text)\n/mega_sending - (text)')
        else:
            await message.answer('–ö—É–¥–∞–∞–∞ –º—ã –ª–µ–∑–µ–º? –ù–µ –ø–æ–ª–æ–∂–µ–Ω–æ, –¥–∞–≤–∞–π –≤ –º–µ–Ω—é.')
            await menu.toMenu(message)
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞: ', ex)

#------------------------------------------------  

@dp.message_handler(commands=['mega_sending'])
async def mega_sending(message):
    global msg
    msg = message
    try:
        a = db.get_all('user_id')
        for i in a:
            await bot.send_message(*i, message.from_chat.text[13:])
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['sending'])
async def sending(message):
    global msg
    msg = message

    try:
        await bot.send_message(message.text[9:20], f"–ê–≤—Ç–æ—Ä: {message.text[20:]}")
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['ask'])
async def ask(message):
    global msg, name
    msg = message
    name = message.from_user.first_name
    try:
        await bot.send_message(ADMIN[0], f'{name} - id: {message.from_user.id}, @{message.from_user.username}\nMessage: {message.text[5:]}')
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=["feedback"])
async def feedback(message): 
    global msg
    msg = message
    try:
        if (db.getting(message.from_user.id, 'language') == "ru"):
            await message.answer("–ì–æ–≤–æ—Ä—è—Ç, —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å? üôÇ", reply_markup=kb.fbBRu)
        else: 
            await message.answer("–ö–∞–∂—É—Ç—å, —á–µ—Ä–µ–∑ —Ü–µ–π –≤—ñ–¥–¥—ñ–ª –º–æ–∂–Ω–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –∞–≤—Ç–æ—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à? üôÇ", reply_markup=kb.fbBUa)

    except Exception as ex:
        print('–û—à–∏–±–∫–∞ feedback –Ω–∞—á–∞–ª–∞: ', ex)

#------------------------------------------------  

@dp.message_handler(commands=['poh'])
async def poh(message):
    global msg
    msg = message

    try:
        user_name = message.from_user.username
        name = db.getting(message.from_user.id, 'name')
        await bot.send_message(ADMIN[0], f"@{user_name}: {name} —Ç–µ–±—è –ø–Ω—É–ª :)")
        await message.answer('–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ –±–æ—Å—Å. –Ø –µ–≥–æ —É–ª–æ–∂–∏–ª')
    except Exception as ex:
        print("poh –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

@dp.message_handler(commands=['pizda'])
async def pizda(message):
    global msg
    msg = message
    try:
        pass
    except Exception as ex:
        print("pizda –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

#------------------------------------------------  

#@dp.message_handler(commands=['restart'])
# def restart():

#     listing = db.get_update()
#     print(listing)
#     for id in listing:
#         bot.send_message(id, '–í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
        #print(type(msg))
        #await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞..")

#------------------------------------------------  


@dp.inline_handler()
async def inline_menu_online(inline_query: types.InlineQuery) -> None:

    text = inline_query.query or '*–Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å*'
    if text != None:
        procent = random.randint(0, 100)
        if procent < 10:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> üôÇ', parse_mode='html')
        elif procent >= 10 and procent < 30:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> üôÑ', parse_mode='html')
        elif procent >= 30 and procent < 70:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> ü´†', parse_mode='html')
        elif procent >= 70:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> ü§™', parse_mode='html')

    result_id: str = hashlib.md5(text.encode()).hexdigest()


    HowGay = InlineQueryResultArticle(
        id = str(uuid.uuid4()),
        input_message_content = InputTextMessageContent(message_text = f'<b>–Ø –≥–µ–π –Ω–∞ {random.randint(0, 100)}%!</b> üè≥Ô∏è‚Äçüåà', parse_mode='html'),
        title = 'üè≥Ô∏è‚Äçüåà –ù–∞—Å–∫–æ–ª—å–∫–æ % —Ç—ã –≥–µ–π',
        description = '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –≤ —á–∞—Ç –∏ —É–∑–Ω–∞–π.',
        thumb_url = 'https://kartinkof.club/uploads/posts/2022-06/1655617211_2-kartinkof-club-p-kartinki-s-nadpisyu-ti-gei-2.png'
        )
    
    HowShiza = InlineQueryResultArticle(
        id = str(uuid.uuid4()),
        input_message_content = how_shiza,
        title = 'ü•¥ –ù–∞—Å–∫–æ–ª—å–∫–æ % —Ç—ã —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫',
        description = '–†–∏—Å–∫–Ω—ë—à—å –∏–ª–∏ –±–æ–∏—à—å—Å—è?',
        thumb_url = 'https://www.neurolikar.com.ua/wp-content/uploads/2017/09/bangalore-treatment-schizophrenia-symptoms.jpg'
        )

    MatNaMat = InlineQueryResultArticle(
        id = str(uuid.uuid4()),
        input_message_content = InputTextMessageContent(message_text = f'<b> {duff[random.randint(0, 42)]}!</b>', parse_mode='html'),
        title = '–ü–æ–∂–µ–ª–∞—Ç—å —Å—á–∞—Å—Ç—å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É',
        description = '–û–±–º–∞—Ç–µ—Ä–∏ –µ–≥–æ/–µ—ë –ø–æ –ø–æ–ª–Ω–æ–π.',
        thumb_url = 'https://psychologyjournal.ru/upload/resize_cache/iblock/710/141_113_2/7105fae3f772f4a7fe11a4d32dd217c9.jpg'
        )

    HowSex = InlineQueryResultArticle(
        id = str(uuid.uuid4()),
        input_message_content = InputTextMessageContent(message_text = f'–°–µ–≥–æ–¥–Ω—è —è –ø–µ—Ä–µ—Å–ø–ª—é —Å <b>{name_sex[random.randint(0, 49)]} ü•∞</b>', parse_mode='html'),
        title = 'C –∫–µ–º —è –ø–µ—Ä–µ—Å–ø–ª—é –ø–æ –∏–º–µ–Ω–∏',
        description = '–° –∫–µ–º —Ç—ã –ø–µ—Ä–µ—Å–ø–∏—à—å ',
        thumb_url = 'https://png.pngtree.com/png-vector/20190420/ourlarge/pngtree-question-mark-vector-icon-png-image_963326.jpg'
        )

    HowDuo = InlineQueryResultArticle(
        id = str(uuid.uuid4()),
        input_message_content = InputTextMessageContent(message_text = f'–¢–≤–æ—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å <b>{text}</b>: {random.randint(0, 100)}% üíû', parse_mode='html'),
        title = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ üíû',
        description = '–í–≤–µ–¥–∏ c—é–¥–∞ –∏–º—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º.',
        thumb_url = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRw3-gg8s81qbG8genEgNX641bc2WNM9qdajA&usqp=CAU'
        )

    await bot.answer_inline_query( results = [HowGay, HowShiza, MatNaMat, HowSex, HowDuo], inline_query_id = inline_query.id, cache_time = 1 )


if __name__ == '__main__':
    executor.start_polling(dispatcher = dp, skip_updates= True)