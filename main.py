from aiogram import Bot, Dispatcher, executor, types
import logging, handlers.uslovie
from config import dp, bot, ADMIN
from querry_db import QuerryDB
from handlers import keyboards as kb, tests as ts, setting as st
from handlers.dialogs import ru, en, uk

# —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = QuerryDB()

# —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

#‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ –ë–û–¢ ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ


@dp.message_handler(commands=['start'])
async def welcome(message): ################### –°–¢–ê–†–¢ –ú–ï–ù–Æ ######################
    global msg
    msg = message
    print(message)
    try:
        if(not db.subsex(message.from_user.id)): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î

            name_start = str(message.from_user.first_name)
            language = str(message.from_user.language_code)
            db.add_subs(message.from_user.id) # / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            db.adding(message.from_user.id, 'username', name_start)
            

            if language == 'ru': #                                 –ï—Å–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                db.adding(message.from_user.id, 'language', 'ru')
                await message.answer("–ü—Ä–∏–≤–µ—Ç, <b>" + name_start + "</b>! üòâ" + ru['hi_start'], parse_mode='html', reply_markup=kb.languageB)

            elif language == 'uk': #                              –ï—Å–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
                db.adding(message.from_user.id, 'language', 'uk')
                db.adding(message.from_user.id,'language', language) ######################/ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –∏–º–µ–Ω–∏
                await message.answer("–ü—Ä–∏–≤i—Ç, <b>" + name_start + "</b>! üòâ" + uk['hi_start'], parse_mode='html', reply_markup=kb.languageB)

            else:              # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª. —á—Ç–æ –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Ö —è–∑—ã–∫
                await message.answer(en["error"], parse_mode='html', reply_markup=kb.languageB)

        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
            global name
            name = db.getting(message.from_user.id, 'username')
            language = db.getting(message.from_user.id, 'language')

            if (language == 'ru'): # –†—É—Å—Å–∫–∏–π
                await message.answer("–ü—Ä–∏–≤–µ—Ç, <b>" + name + "</b>! –ü—Ä–∏—è—Ç–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ :)", parse_mode='html')
            else:                                                      # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
                await message.answer("–ü—Ä–∏–≤—ñ—Ç, <b>" + name + "</b>! –ü—Ä–∏—î–º–Ω–æ –ø–æ–±–∞—á–∏—Ç–∏ —Ç–µ–±–µ –∑–Ω–æ–≤—É :)",parse_mode='html')
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç-–º–µ–Ω—é:', ex)

@dp.message_handler(commands=['menu'])
async def toMenu(message): #******************* –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ *********************
    global msg
    msg = message
    try:
        if (db.getting(message.from_user.id, 'language') == "ru"): #            –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            await message.answer("üî∏                <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>                üî∏\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
            parse_mode='html', reply_markup=kb.board_menu)
                        
        elif (db.getting(message.from_user.id, 'language') == "uk"): #            –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
            await message.answer("üî∏                <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>                üî∏\n\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.",
            parse_mode='html', reply_markup = kb.board_menu)
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ', ex)


#******************************* –ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ô–ö–ò*******************************

#@dp.message_handler(commands=['hyi'])
async def hyi(message):
    global msg
    msg = message

    try:
        await bot.edit_message_reply_markup(message.from_user.id, message.id)
        await message.answer('–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ –±–æ—Å—Å')
    except Exception as ex:
        print("Tarakota –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.callback_query_handler(text='menu_setting')
async def inline_menu(c):
    if (db.getting(c.message.chat.id, 'gender') == "Male"):
        if (db.getting(c.message.chat.id, 'language') == "ru"): 

            await bot.edit_message_text("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", chat_id=c.message.chat.id, message_id=c.message.message_id)
            await bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb.setting_button_ru_men)
        else:
            await bot.edit_message_text("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", chat_id=c.message.chat.id, message_id=c.message.message_id)
            await bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb.setting_button_uk_men)

    elif (db.getting(c.message.chat.id, 'gender') == "Female"):
        if (db.getting(c.message.chat.id, 'language') == "ru"): 

            await bot.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", chat_id=c.message.chat.id, message_id=c.message.message_id)
            await bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb.setting_button_ru_women)
        else:
            await bot.edit_message_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", chat_id=c.message.chat.id, message_id=c.message.message_id)
            await bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id, reply_markup=kb.setting_button_uk_women)
    else:
        db.adding(c.message.chat.id, 'gender', "Male")

@dp.callback_query_handler(text='setting_gender_ru')
async def setting_gender_ru(c):
    if (db.getting(c.message.chat.id, 'gender') == "Female"):
        db.adding(c.message.chat.id, 'gender', "Male")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'gender', "Female")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_gender_uk')
async def setting_gender_uk(c):
    if (db.getting(c.message.chat.id, 'gender') == "Female"):
        db.adding(c.message.chat.id, 'gender', "Male")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'gender', "Female")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_language_ru')
async def setting_language_ru(c):
    if (db.getting(c.message.chat.id, 'language') == "ru"):
        db.adding(c.message.chat.id, 'language', "uk")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'language', "ru")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_language_uk')
async def setting_language_uk(c):
    if (db.getting(c.message.chat.id, 'language') == "uk"):
        db.adding(c.message.chat.id, 'language', "ru")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'language', "uk")
        await inline_menu(c)

#******************************* –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï *******************************

@dp.message_handler(commands=['help'])
async def help_panel(message):
    global msg
    msg = message
    await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/poh - –ü–Ω—É—Ç—å –ê–¥–º–∏–Ω–∞\n/ask - –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ( /ask text )"\n/feedback - –°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º')
  

@dp.message_handler(commands=['negritos'])
async def admin_panel(message):
    global msg
    msg = message
    try:
        if message.from_user.id in ADMIN:
            await message.answer('Hi, my lord.')
            await message.answer('Here:\n/start - –°—Ç–∞—Ä—Ç, –æ–±—â–∏–π –∑–∞–ø—É—Å–∫\n/terakota - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π\n/hyi - –ü–Ω—É—Ç—å –°–∞–Ω—é\n/sending - (id) (text)\n/mega_sending - (text)')
        else:
            await message.answer('–ö—É–¥–∞–∞–∞ –º—ã –ª–µ–∑–µ–º? –ù–µ –ø–æ–ª–æ–∂–µ–Ω–æ, –¥–∞–≤–∞–π –≤ –º–µ–Ω—é.')
            await toMenu(message)
    except Exception as ex:
        print('–û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞: ', ex)

@dp.message_handler(commands=['mega_sending'])
async def mega_sending(message):
    global msg
    msg = message
    try:
        a = db.get_all('user_id')
        for i in a:
            await bot.send_message(*i, message.from_chat.text[13:])
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.message_handler(commands=['sending'])
async def sending(message):
    global msg
    msg = message

    try:
        await bot.send_message(message.text[9:20], f"–ê–≤—Ç–æ—Ä: {message.text[20:]}")
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.message_handler(commands=['ask'])
async def ask(message):
    global msg, name
    msg = message
    name = message.from_user.first_name
    try:
        await bot.send_message(ADMIN[0], f'{name} - id: {message.from_user.id}, @{message.from_user.username}\nMessage: {message.text[5:]}')
    except Exception as ex:
        print("mega_sending –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.message_handler(commands=["feedback"])
async def feedback(message): 
    global msg
    msg = message
    try:
        if (db.getting(message.from_user.id, 'language') == "ru"):
            await message.answer("–ì–æ–≤–æ—Ä—è—Ç, —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å? üôÇ", reply_markup=kb.fbBRu)
        else: 
            await message.answer("–ö–∞–∂—É—Ç—å, —á–µ—Ä–µ–∑ —Ü–µ–π –≤—ñ–¥–¥—ñ–ª –º–æ–∂–Ω–∞ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –∞–≤—Ç–æ—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –¢–æ—á–Ω–æ —Ö–æ—á–µ—à? üôÇ", reply_markup=kb.fbBUa)

    except Exception as ex:
        print('–û—à–∏–±–∫–∞ feedback –Ω–∞—á–∞–ª–∞: ', ex)

@dp.message_handler(commands=['poh'])
async def poh(message):
    global msg
    msg = message

    try:
        user_name = message.from_user.username
        name = db.getting(message.from_user.id, 'name')
        await bot.send_message(ADMIN[0], f"@{user_name}: {name} —Ç–µ–±—è –ø–Ω—É–ª :)")
        await message.answer('–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ –±–æ—Å—Å. –Ø –µ–≥–æ —É–ª–æ–∂–∏–ª')
    except Exception as ex:
        print("poh –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.message_handler(commands=['pizda'])
async def pizda(message):
    global msg
    msg = message
    try:
        pass
    except Exception as ex:
        print("pizda –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.message_handler(commands=['restart'])
async def restart(message):
    global msg
    msg = message
    print(type(msg))
    #await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞..")

#******************************** CallBack Inline All*********************************

@dp.callback_query_handler(text="fb_yes")
async def inline_fb_yes(call:types.CallbackQuery):

    try:
        user_name = call.message.chat.username
        name = call.message.chat.first_name
        await bot.send_message(ADMIN[0], f"@{user_name}: {name}, —Ö–æ—á–µ—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å :)")
        await bot.send_message(call.message.chat.id, """–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è üòâ (–∏–ª–∏ –Ω–µ—Ç)\n
        –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É: @alexnerw\n–ê –ø–æ–∫–∞ —á—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ —Ç–µ–±—è –º–µ–Ω—é:""", parse_mode='html', reply_markup=None)
        await toMenu(msg)
    except Exception as ex:
        print("""–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ:\n
        fb_yes —á—ë—Ç –ø–æ–¥–≤–µ–ª–æ: """, ex)

@dp.callback_query_handler(text="fb_no")
async def inline_fb_no(call:types.CallbackQuery):
    try:

        await bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ! –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç :)", parse_mode='html', reply_markup=None)
        await toMenu(msg)
    except Exception as ex:
        print("""–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ:\n
        fb_no —á—ë—Ç –ø–æ–¥–≤–µ–ª–æ: """, ex)

#******************************** CallBack Inline Menu *********************************
   
@dp.callback_query_handler(text="menu_test")
async def inline_menu_tests(call:types.CallbackQuery):
    try:
        #await bot.answer_callback_query(call.message.chat.id)
        await ts.tests(call.message)
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_test: ", ex)

@dp.callback_query_handler(text="menu_setting")
async def inline_menu_setting(call:types.CallbackQuery):
    try:
        await st.setting(call.message)
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_setting:", ex)

@dp.callback_query_handler(text="menu_calendar")
async def inline_menu_—Åalendar(call:types.CallbackQuery):
    try:
        await call.message.answer("–ù–∏—Ö–µ—Ä–∞ –ø–æ–∫–∞-—á—Ç–æ")
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_—Åalendar: ", ex)

@dp.callback_query_handler(text="menu_game")
async def inline_menu_game(call:types.CallbackQuery):
    try:
        await call.message.answer("–¢—É—Ç –Ω–∏—Ö–µ—Ä–∞ –Ω–µ—Ç")
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_game: ", ex)


def register_uslovie(dp : Dispatcher):
    dp.register_message_handler(welcome, content_types=['command'])
    #dp.register_message_handler(input_name, content_types=['man'])

if __name__ == '__main__':
    #************************************ –ó–ê–ü–£–°–ö *************************************
    executor.start_polling(dp, skip_updates=True)
