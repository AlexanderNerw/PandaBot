from aiogram import Bot, Dispatcher, executor, types
import keyboards as kb, tests as ts, setting as st
from config import dp, bot, ADMIN
from querry_db import db
from dialogs import *
import menu


#@dp.message_handler(commands=['hyi'])
async def hyi(message):
    global msg
    msg = message

    try:
        await bot.edit_message_reply_markup(message.from_user.id, message.id)
        await message.answer('–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ –±–æ—Å—Å')
    except Exception as ex:
        print("Tarakota –Ω–µ –Ω–æ—Ä–º–∞—Å: ", ex)

@dp.callback_query_handler(text='menu_setting')
async def inline_menu(c):
    if (db.getting(c.message.chat.id, 'gender') == "Male"):
        if (db.getting(c.message.chat.id, 'language') == "ru"): 

            await bot.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", c.message.chat.id, c.message.message_id)
            await bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb.setting_button_ru_men)
        else:
            await bot.edit_message_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", c.message.chat.id, c.message.message_id)
            await bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=kb.setting_button_uk_men)

    elif (db.getting(c.message.chat.id, 'gender') == "Female"):
        if (db.getting(c.message.chat.id, 'language') == "ru"): 

            await bot.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", c.message.chat.id, c.message.message_id)
            await bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup = kb.setting_button_ru_women)
        else:
            await bot.edit_message_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", c.message.chat.id, c.message.message_id)
            await bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup = kb.setting_button_uk_women)
    else:
        db.adding(c.message.chat.id, 'gender', "Male")

@dp.callback_query_handler(text='setting_gender_ru')
async def setting_gender_ru(c):
    if (db.getting(c.message.chat.id, 'gender') == "Female"):
        db.adding(c.message.chat.id, 'gender', "Male")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'gender', "Female")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_gender_uk')
async def setting_gender_uk(c):
    if (db.getting(c.message.chat.id, 'gender') == "Female"):
        db.adding(c.message.chat.id, 'gender', "Male")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'gender', "Female")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_language_ru')
async def setting_language_ru(c):
    if (db.getting(c.message.chat.id, 'language') == "ru"):
        db.adding(c.message.chat.id, 'language', "uk")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'language', "ru")
        await inline_menu(c)

@dp.callback_query_handler(text='setting_language_uk')
async def setting_language_uk(c):
    if (db.getting(c.message.chat.id, 'language') == "uk"):
        db.adding(c.message.chat.id, 'language', "ru")
        await inline_menu(c)
    else:
        db.adding(c.message.chat.id, 'language', "uk")
        await inline_menu(c)

@dp.callback_query_handler(text="menu_test")
async def inline_menu_tests(call:types.CallbackQuery):
    try:
        #await bot.answer_callback_query(call.message.chat.id)
        await ts.tests(call.message)
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_test: ", ex)

@dp.callback_query_handler(text="menu_setting")
async def inline_menu_setting(call:types.CallbackQuery):
    try:
        await st.setting(call.message)
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_setting:", ex)

@dp.callback_query_handler(text="menu_calendar")
async def inline_menu_—Åalendar(call:types.CallbackQuery):
    try:
        await call.message.answer("–ù–∏—Ö–µ—Ä–∞ –ø–æ–∫–∞-—á—Ç–æ")
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_—Åalendar: ", ex)

@dp.callback_query_handler(text="menu_game")
async def inline_menu_game(call:types.CallbackQuery):
    try:
        await call.message.answer("–¢—É—Ç –Ω–∏—Ö–µ—Ä–∞ –Ω–µ—Ç")
    except Exception as ex:
        print("–®–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å call_menu_game: ", ex)

@dp.callback_query_handler(text="fb_yes")
async def inline_fb_yes(call:types.CallbackQuery):

    try:
        user_name = call.message.chat.username
        name = call.message.chat.first_name
        await bot.send_message(ADMIN[0], f"@{user_name}: {name}, —Ö–æ—á–µ—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å :)")
        await bot.send_message(call.message.chat.id, """–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è üòâ (–∏–ª–∏ –Ω–µ—Ç)\n
        –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É: @alexnerw\n–ê –ø–æ–∫–∞ —á—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ —Ç–µ–±—è –º–µ–Ω—é:""", parse_mode='html', reply_markup=None)
        await menu.toMenu(msg)
    except Exception as ex:
        print("""–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ:\n
        fb_yes —á—ë—Ç –ø–æ–¥–≤–µ–ª–æ: """, ex)

@dp.callback_query_handler(text="fb_no")
async def inline_fb_no(call:types.CallbackQuery):
    try:

        await bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ! –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç :)", parse_mode='html', reply_markup=None)
        await menu.toMenu(msg)
    except Exception as ex:
        print("""–û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ:\n
        fb_no —á—ë—Ç –ø–æ–¥–≤–µ–ª–æ: """, ex)