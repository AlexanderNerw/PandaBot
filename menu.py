from aiogram.types import InlineQueryResultArticle, InputTextMessageContent, InlineQuery
import hashlib, random, uuid, handlers.sign_up
from handlers.support.importing import *

######################################################################################### - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –õ–ò–ß–ù–û–ì–û –ß–ê–¢–ê
@dp.message_handler(CHAT_PRIVATE, commands=['menu'])                                   ##   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
async def toMenu(message) -> None: 
    try:
        if (db.user_online_in_database(message.chat.id)):

            await bot.send_message(message.chat.id, general_text[f"{db.getting(message.chat.id, 'language')}_menu_text"],
                parse_mode='html', reply_markup = board_menu[db.getting(message.chat.id, 'language')])

        else: await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: üôÇ'), await handlers.sign_up.start(message, FSMContext)

    except Exception as ex: await exceptions("menu.py", 'toMenu', ex)

@dp.callback_query_handler(CHAT_PRIVATE, text='toMenu')                                ##   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –° –ò–ó–ú–ï–ù–ï–ù–ò–ï–ú
async def toMenuWithout(c: CallbackQuery) -> None:
    try:

        if (db.user_online_in_database(c.message.chat.id)):

            await bot.edit_message_text(general_text[f"{db.getting(c.message.chat.id, 'language')}_menu_text"],
                c.message.chat.id, c.message.message_id, parse_mode='html', reply_markup = board_menu[db.getting(c.message.chat.id, 'language')])

        else:
            await bot.send_message(c.message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è üôÇ:')
            await handlers.sign_up.start(c.message, FSMContext)

    except Exception as ex: await exceptions("menu.py", 'toMenuWithout', ex)


######################################################################################### - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ì–†–£–ü–ü–û–í–û–ì–û –ß–ê–¢–ê
@dp.message_handler(CHAT_GROUP, commands=['menu'])                                   ##   –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ì–†–£–ü–ü–û–í–û–ì–û –ß–ê–¢–ê
async def toMenu_group(message) -> None: 
    try:
        print(message)
        if (db.user_online_in_database(message.chat.id)):

            await bot.send_message(message.chat.id, general_text[f"{db.getting(message.chat.id, 'language')}_menu_text"],
                parse_mode='html', reply_markup = board_menu[db.getting(message.chat.id, 'language')])

        else: await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: üôÇ'), await handlers.sign_up.start(message, FSMContext)

    except Exception as ex: await exceptions("menu.py", 'toMenu_group', ex)

######################################################################################### - –ò–ù–õ–ê–ô–ù –†–ï–ñ–ò–ú
@dp.inline_handler()
async def inline_menu_inline(inline_query: InlineQuery) -> None:
    try:
        text = inline_query.query
        procent = random.randint(0, 100)
        if procent < 10:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> üôÇ', parse_mode='html')
            how_gay = InputTextMessageContent(message_text = f'<b>–Ø –≥–µ–π –Ω–∞ {procent}%!</b> ü§•', parse_mode='html')
        elif procent >= 10 and procent < 30:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> üôÑ', parse_mode='html')
            how_gay = InputTextMessageContent(message_text = f'<b>–Ø –≥–µ–π –Ω–∞ {procent}%!</b> üôÇ', parse_mode='html')
        elif procent >= 30 and procent < 70:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> ü´†', parse_mode='html')
            how_gay = InputTextMessageContent(message_text = f'<b>–Ø –≥–µ–π –Ω–∞ {procent}%!</b> ü§´', parse_mode='html')
        elif procent >= 70:
            how_shiza = InputTextMessageContent(message_text = f'<b>–Ø —à–∏–∑–∏–∫ –Ω–∞ {procent}%!</b> ü§™', parse_mode='html')
            how_gay = InputTextMessageContent(message_text = f'<b>–Ø –≥–µ–π –Ω–∞ {procent}%!</b> üè≥Ô∏è‚Äçüåà', parse_mode='html')

        result_id: str = hashlib.md5(text.encode()).hexdigest()


        HowGay = InlineQueryResultArticle(
            id = str(uuid.uuid4()),
            input_message_content = how_gay,
            title = 'üè≥Ô∏è‚Äçüåà –ù–∞—Å–∫–æ–ª—å–∫–æ % —Ç—ã –≥–µ–π',
            description = '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –≤ —á–∞—Ç –∏ —É–∑–Ω–∞–π.',
            thumb_url = 'https://kartinkof.club/uploads/posts/2022-06/1655617211_2-kartinkof-club-p-kartinki-s-nadpisyu-ti-gei-2.png'
            )
        
        HowShiza = InlineQueryResultArticle(
            id = str(uuid.uuid4()),
            input_message_content = how_shiza,
            title = 'ü•¥ –ù–∞—Å–∫–æ–ª—å–∫–æ % —Ç—ã —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫',
            description = '–†–∏—Å–∫–Ω—ë—à—å –∏–ª–∏ –±–æ–∏—à—å—Å—è?',
            thumb_url = 'https://www.neurolikar.com.ua/wp-content/uploads/2017/09/bangalore-treatment-schizophrenia-symptoms.jpg'
            )

        # MatNaMat = InlineQueryResultArticle(
        #     id = str(uuid.uuid4()),
        #     input_message_content = InputTextMessageContent(message_text = f'<b> {duff[random.randint(0, 43)]}!</b>', parse_mode='html'),
        #     title = '–ü–æ–∂–µ–ª–∞—Ç—å —Å—á–∞—Å—Ç—å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É',
        #     description = '–û–±–º–∞—Ç–µ—Ä–∏ –µ–≥–æ/–µ—ë –ø–æ –ø–æ–ª–Ω–æ–π.',
        #     thumb_url = 'https://psychologyjournal.ru/upload/resize_cache/iblock/710/141_113_2/7105fae3f772f4a7fe11a4d32dd217c9.jpg'
        #     )

        AnswerRandom = InlineQueryResultArticle(
            id = str(uuid.uuid4()),
            input_message_content = InputTextMessageContent(message_text = f"–í–æ–ø—Ä–æ—Å: <b>{text}</b>\n\n{inline_mode_answer_random[random.randint(0, 7)]}", parse_mode='html') if  inline_query.query != ""
                            else InputTextMessageContent(message_text = f"{inline_query.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–∞–π –Ω–∞ —á—Ç–æ –ø–æ–ø–∞–ª–æ.", parse_mode='html'),
            title = '–¢–∞–∫ –ª–∏ —ç—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ? üßê',
            description = '–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É –ø—Ä–∞–≤–¥–∞ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç',
            thumb_url = 'http://i.otzovik.com/objects/b/420000/412271.png'
            )


        HowSex = InlineQueryResultArticle(
            id = str(uuid.uuid4()),
            input_message_content = InputTextMessageContent(message_text = f'–°–µ–≥–æ–¥–Ω—è —è –ø–µ—Ä–µ—Å–ø–ª—é —Å <b>{inline_mode_name_sex[random.randint(0, 49)]} ü•∞</b>', parse_mode='html'),
            title = 'C –∫–µ–º —è —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ—Å–ø–ª—é?',
            description = '–° –∫–µ–º —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ—Å–ø–∏—à—å.',
            thumb_url = 'https://png.pngtree.com/png-vector/20190420/ourlarge/pngtree-question-mark-vector-icon-png-image_963326.jpg'
            )

        empty_how_duo = InputTextMessageContent(message_text = f'<b>–¢—ã –¥–∞—É–Ω —Ç—É–ø–æ–π –≤–≤–µ–¥–∏ –∏–º—è —Å—É–∫–∞ ü•∞</b>', parse_mode='html')
        full_how_duo = InputTextMessageContent(message_text = f'üíû C–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å <b>{inline_query.from_user.first_name}</b> —Å <b>{text}</b>: {random.randint(0, 100)}% üíû', parse_mode='html')
        how_duo = empty_how_duo if text in ['*–Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å*', 'c c–æ–±–æ–π', 'c–æ–±–æ–π'] else full_how_duo

        HowDuo = InlineQueryResultArticle(
            id = str(uuid.uuid4()),
            input_message_content = how_duo,
            title = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ üíû',
            description = '–í–≤–µ–¥–∏ c—é–¥–∞ –∏–º—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º.',
            thumb_url = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRw3-gg8s81qbG8genEgNX641bc2WNM9qdajA&usqp=CAU'
            )

        if text == "":  await bot.answer_inline_query( results = [HowGay, HowShiza, HowSex, HowDuo, AnswerRandom], inline_query_id = inline_query.id, cache_time = 1 )
        else:           await bot.answer_inline_query( results = [HowDuo, AnswerRandom], inline_query_id = inline_query.id, cache_time = 1 )

    except Exception as ex: await exceptions("menu.py", 'inline_menu_inline', ex)