from handlers.support.importing import *


class AnswerTest(StatesGroup):  # –ú–ê–®–ò–ù–ê –°–û–°–¢–†–û–Ø–ù–ò–ô –î–õ–Ø –¢–ï–°–¢–û–í
        answerNum = State()
        answerLang = State()


@dp.callback_query_handler(text='back_menu_test', state=AnswerTest)   # –í–û–ó–í–†–ê–¢ –ù–ê–ó–ê–î
async def question_back(call: CallbackQuery, state: FSMContext):

    await state.reset_data()
    await state.finish()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, f"–î–æ–±—Ä–µ, –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é:", parse_mode='html')
    await tests(call.message.chat.id, call.message.message_id+1)
    print(f"Id: {call.message.chat.id} | –ó–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")


try: # TEST DEPRESSION BEKA 

    # –ú–ï–ù–Æ –¢–ï–°–¢ –î–ï–ü–†–ï–°–°–ò–ò –¢–ï–°–¢–ê –î–ï–ü–†–ï–°–°–ò–ò –ë–ï–ö–ê
    @dp.callback_query_handler(text='test_depression_beka')
    async def menu_test_depression_beka(call: CallbackQuery) -> None:
        
        lang = db.getting(call.message.chat.id, 'language')
        await bot.edit_message_text(test_depression_beka_result[lang],
        call.message.chat.id, call.message.message_id, parse_mode='html', reply_markup=button_test)
        await AnswerTest.answerNum.set()

    # –í–û–ó–í–†–ê–¢ –ù–ê–ó–ê–î
    @dp.callback_query_handler(text='back_menu_test', state=AnswerTest)
    async def question_back(call: CallbackQuery, state: FSMContext):

        await state.finish()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, f"–î–æ–±—Ä–µ, –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é:", parse_mode='html')
        await tests(call.message.chat.id, call.message.message_id+1)
        print(f"Id: {call.message.chat.id} | –ó–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")
        
    # –í–û–ü–†–û–° 1
    @dp.callback_query_handler(text='yes_test', state=AnswerTest.answerNum)
    async def question1(call: CallbackQuery, state: FSMContext):

        async with state.proxy() as data:
            data['answerLang'] = db.getting(call.message.chat.id, 'language')
            data['answerNum'] = 1 
            data['answerEnd'] = 0

        print(f"Id: {call.message.chat.id} | –ù–∞—á–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")
        await bot.edit_message_text(test_depression_beka[f"answer_{data['answerNum']}_{data['answerLang']}"],
        call.message.chat.id, call.message.message_id, parse_mode='html', reply_markup=one_two_three_four)
 
    # –û–ë–©–ê–Ø –§–û–†–ú–ê –î–õ–Ø –í–û–ü–†–û–°–û–í –ë–ï–ö–ê
    @dp.callback_query_handler(text=['1', '2', '3', '4'], state=AnswerTest.answerNum)
    async def questions_TDB(call: CallbackQuery, state: FSMContext): 

        try:
            await call.answer()

            async with state.proxy() as data:
                data['answerEnd'] += int(call.data)-1
                lang = data['answerLang']

            await bot.delete_message(call.message.chat.id, call.message.message_id)

            if data['answerNum'] < 21:
                async with state.proxy() as data:
                    data['answerNum'] += 1
                
                await bot.send_message(call.message.chat.id, test_depression_beka[f"answer_{data['answerNum']}_{lang}"],
                parse_mode='html', reply_markup=one_two_three_four)

            else: 

                result_point = '–∏–∑ 63 –±–∞–ª–ª–æ–≤' if lang == 'ru' else '–∑ 63 –±–∞–ª—ñ–≤'
                lang = data['answerLang']

                if data['answerEnd'] < 10:
                    text = '0-9'
                elif data['answerEnd'] >= 10 and data['answerEnd'] < 16:
                    text = '10-15'
                elif data['answerEnd'] >= 16 and data['answerEnd'] < 20:
                    text = '16-19'
                elif data['answerEnd'] >= 20 and data['answerEnd'] < 30:
                    text = '20-29'
                elif data['answerEnd'] >= 30:
                    text = '30-63'

                await bot.send_message(call.message.chat.id, f"<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data['answerEnd']} {result_point}</b>\n\n{test_depression_beka_result[f'{lang}{text}']}",
                                reply_markup=go_to_menu, parse_mode='html')
                print(f"Id: {call.message.chat.id} | –ó–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")
                await state.finish()

        except Exception as ex:
            if str(ex) != 'Message to delete not found':
                print(f'tests.py [INFO] –ù–µ–ø–æ–ª–∞–¥–∫–∏ –≤ questions_TDB –¢–µ—Å—Ç–∞ –î–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞: {ex}')

        finally: await call.answer()
except Exception as ex: # TEST DEPRESSION BEKA 
    print(f'tests.py [INFO] –ù–µ–ø–æ–ª–∞–¥–∫–∏ –≤ –¢–µ—Å—Ç–µ –î–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞: {ex}')


try:  # –¢–ï–°–¢ –¢–†–ï–í–û–ñ–ù–û–°–¢–ò –ë–ï–ö–ê

    # –ú–ï–ù–Æ –¢–ï–°–¢ –¢–†–ï–í–û–ñ–ù–û–°–¢–ò –ë–ï–ö–ê
    @dp.callback_query_handler(text='test_depression_beka')
    async def menu_test_depression_beka(call: CallbackQuery) -> None:
        
        lang = db.getting(call.message.chat.id, 'language')
        await bot.edit_message_text(test_depression_beka_result[lang],
        call.message.chat.id, call.message.message_id, parse_mode='html', reply_markup=button_test)
        await AnswerTest.answerNum.set()

    # –í–û–ü–†–û–° 1
    @dp.callback_query_handler(text='yes_test', state=AnswerTest.answerNum)
    async def question1(call: CallbackQuery, state: FSMContext):

        async with state.proxy() as data:
            data['answerLang'] = db.getting(call.message.chat.id, 'language')
            data['answerNum'] = 1 
            data['answerEnd'] = 0

        print(f"Id: {call.message.chat.id} | –ù–∞—á–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")
        question = test_worry_beka[f"answer_1_{data['answerLang']}"]
        await bot.edit_message_text(test_worry_beka[f"answer_{data['answerNum']}_{data['answerLang']}"],
        call.message.chat.id, call.message.message_id, parse_mode='html', reply_markup=one_two_three_four)
 
    # –û–ë–©–ê–Ø –§–û–†–ú–ê –î–õ–Ø –í–û–ü–†–û–°–û–í –¢–ï–°–¢–ê –¢–†–ï–í–û–ñ–ù–û–°–¢–ò –ë–ï–ö–ê
    @dp.callback_query_handler(text=['1', '2', '3', '4'], state=AnswerTest.answerNum)
    async def questions_TWB(call: CallbackQuery, state: FSMContext): 

        try:
            await call.answer()

            async with state.proxy() as data:
                data['answerEnd'] += int(call.data)-1

            await bot.delete_message(call.message.chat.id, call.message.message_id)

            if data['answerNum'] < 21:
                async with state.proxy() as data:
                    data['answerNum'] += 1
                
                question = test_worry_beka[f"answer_{data['answerNum']}_{data['answerLang']}"]
                await bot.send_message(call.message.chat.id, f"–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –í–∞—Å –±–µ—Å–ø–æ–∫–æ–∏–ª–æ –¥–∞–Ω–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n{question}",
                parse_mode='html', reply_markup=one_two_three_four)

            else: 

                result_point_text = '–∏–∑ 63 –±–∞–ª–ª–æ–≤' if data['answerLang'] == 'ru' else '–∑ 63 –±–∞–ª—ñ–≤'

                if data['answerEnd'] < 10:
                    text = '0-9'
                elif data['answerEnd'] >= 10 and data['answerEnd'] < 16:
                    text = '10-15'
                elif data['answerEnd'] >= 16 and data['answerEnd'] < 20:
                    text = '16-19'
                elif data['answerEnd'] >= 20 and data['answerEnd'] < 30:
                    text = '20-29'
                elif data['answerEnd'] >= 30:
                    text = '30-63'

                lang = data['answerLang']
                await bot.send_message(call.message.chat.id, f"<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data['answerEnd']} {result_point_text}</b>\n\n{test_worry_beka_result[f'{lang}{text}']}",
                                reply_markup=go_to_menu, parse_mode='html')
                print(f"Id: {call.message.chat.id} | –ó–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç")
                await state.finish()

        except Exception as ex:
            if str(ex) != 'Message to delete not found':
                print(f'tests.py [INFO] –ù–µ–ø–æ–ª–∞–¥–∫–∏ –≤ questions_TDB –¢–µ—Å—Ç–∞ –î–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞: {ex}')

        finally: await call.answer()

except Exception as ex: # TEST DEPRESSION BEKA 
    print(f'tests.py [INFO] –ù–µ–ø–æ–ª–∞–¥–∫–∏ –≤ –¢–µ—Å—Ç–µ –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –ë–µ–∫–∞: {ex}')


async def tests(chat_id, message_id):
    lang = db.getting(chat_id, 'language')
    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id, f"üßæ {general_text_answer[f'{lang}_list_tests']}\n",
    parse_mode='html', reply_markup=menu_all_test)
